// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventservice.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _eventservice_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EventId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventIdMultiError, or nil if none found.
func (m *EventId) ValidateAll() error {
	return m.validate(true)
}

func (m *EventId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EventIdMultiError(errors)
	}

	return nil
}

// EventIdMultiError is an error wrapping multiple validation errors returned
// by EventId.ValidateAll() if the designated constraints aren't met.
type EventIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventIdMultiError) AllErrors() []error { return m }

// EventIdValidationError is the validation error returned by EventId.Validate
// if the designated constraints aren't met.
type EventIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventIdValidationError) ErrorName() string { return "EventIdValidationError" }

// Error satisfies the builtin error interface
func (e EventIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventIdValidationError{}

// Validate checks the field values on EventRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventRequestMultiError, or
// nil if none found.
func (m *EventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 30 {
		err := EventRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if l := utf8.RuneCountInString(m.GetDescription()); l < 5 || l > 150 {
			err := EventRequestValidationError{
				field:  "Description",
				reason: "value length must be between 5 and 150 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDatetime() == nil {
		err := EventRequestValidationError{
			field:  "Datetime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() == nil {
		err := EventRequestValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = EventRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNotifyBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventRequestValidationError{
					field:  "NotifyBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventRequestValidationError{
					field:  "NotifyBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventRequestValidationError{
				field:  "NotifyBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventRequestMultiError(errors)
	}

	return nil
}

func (m *EventRequest) _validateUuid(uuid string) error {
	if matched := _eventservice_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EventRequestMultiError is an error wrapping multiple validation errors
// returned by EventRequest.ValidateAll() if the designated constraints aren't met.
type EventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventRequestMultiError) AllErrors() []error { return m }

// EventRequestValidationError is the validation error returned by
// EventRequest.Validate if the designated constraints aren't met.
type EventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventRequestValidationError) ErrorName() string { return "EventRequestValidationError" }

// Error satisfies the builtin error interface
func (e EventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventRequestValidationError{}

// Validate checks the field values on UpdateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEventRequestMultiError, or nil if none found.
func (m *UpdateEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEventRequestMultiError(errors)
	}

	return nil
}

// UpdateEventRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEventRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventRequestMultiError) AllErrors() []error { return m }

// UpdateEventRequestValidationError is the validation error returned by
// UpdateEventRequest.Validate if the designated constraints aren't met.
type UpdateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventRequestValidationError) ErrorName() string {
	return "UpdateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventRequestValidationError{}

// Validate checks the field values on EventResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventResponseMultiError, or
// nil if none found.
func (m *EventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetDatetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventResponseValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventResponseValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDatetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventResponseValidationError{
				field:  "Datetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventResponseValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventResponseValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventResponseValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetNotifyBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventResponseValidationError{
					field:  "NotifyBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventResponseValidationError{
					field:  "NotifyBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventResponseValidationError{
				field:  "NotifyBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventResponseMultiError(errors)
	}

	return nil
}

// EventResponseMultiError is an error wrapping multiple validation errors
// returned by EventResponse.ValidateAll() if the designated constraints
// aren't met.
type EventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventResponseMultiError) AllErrors() []error { return m }

// EventResponseValidationError is the validation error returned by
// EventResponse.Validate if the designated constraints aren't met.
type EventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventResponseValidationError) ErrorName() string { return "EventResponseValidationError" }

// Error satisfies the builtin error interface
func (e EventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventResponseValidationError{}

// Validate checks the field values on EventResponses with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventResponses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventResponses with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventResponsesMultiError,
// or nil if none found.
func (m *EventResponses) ValidateAll() error {
	return m.validate(true)
}

func (m *EventResponses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventResponsesValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventResponsesValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventResponsesValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventResponsesMultiError(errors)
	}

	return nil
}

// EventResponsesMultiError is an error wrapping multiple validation errors
// returned by EventResponses.ValidateAll() if the designated constraints
// aren't met.
type EventResponsesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventResponsesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventResponsesMultiError) AllErrors() []error { return m }

// EventResponsesValidationError is the validation error returned by
// EventResponses.Validate if the designated constraints aren't met.
type EventResponsesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventResponsesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventResponsesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventResponsesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventResponsesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventResponsesValidationError) ErrorName() string { return "EventResponsesValidationError" }

// Error satisfies the builtin error interface
func (e EventResponsesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventResponses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventResponsesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventResponsesValidationError{}
