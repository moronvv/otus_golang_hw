// Code generated by mockery v2.34.2. DO NOT EDIT.

package mockedstorage

import (
	context "context"

	uuid "github.com/google/uuid"
	storage "github.com/moronvv/otus_golang_hw/hw12_13_14_15_calendar/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) CreateEvent(_a0 context.Context, _a1 *storage.Event) (*storage.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) (*storage.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) *storage.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.Event) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockStorage_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *storage.Event
func (_e *MockStorage_Expecter) CreateEvent(_a0 interface{}, _a1 interface{}) *MockStorage_CreateEvent_Call {
	return &MockStorage_CreateEvent_Call{Call: _e.mock.On("CreateEvent", _a0, _a1)}
}

func (_c *MockStorage_CreateEvent_Call) Run(run func(_a0 context.Context, _a1 *storage.Event)) *MockStorage_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage.Event))
	})
	return _c
}

func (_c *MockStorage_CreateEvent_Call) Return(_a0 *storage.Event, _a1 error) *MockStorage_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_CreateEvent_Call) RunAndReturn(run func(context.Context, *storage.Event) (*storage.Event, error)) *MockStorage_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEvent provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) DeleteEvent(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_DeleteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvent'
type MockStorage_DeleteEvent_Call struct {
	*mock.Call
}

// DeleteEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MockStorage_Expecter) DeleteEvent(_a0 interface{}, _a1 interface{}) *MockStorage_DeleteEvent_Call {
	return &MockStorage_DeleteEvent_Call{Call: _e.mock.On("DeleteEvent", _a0, _a1)}
}

func (_c *MockStorage_DeleteEvent_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MockStorage_DeleteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorage_DeleteEvent_Call) Return(_a0 error) *MockStorage_DeleteEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_DeleteEvent_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockStorage_DeleteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) GetEvent(_a0 context.Context, _a1 uuid.UUID) (*storage.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*storage.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *storage.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockStorage_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MockStorage_Expecter) GetEvent(_a0 interface{}, _a1 interface{}) *MockStorage_GetEvent_Call {
	return &MockStorage_GetEvent_Call{Call: _e.mock.On("GetEvent", _a0, _a1)}
}

func (_c *MockStorage_GetEvent_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MockStorage_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorage_GetEvent_Call) Return(_a0 *storage.Event, _a1 error) *MockStorage_GetEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetEvent_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*storage.Event, error)) *MockStorage_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: _a0
func (_m *MockStorage) GetEvents(_a0 context.Context) ([]storage.Event, error) {
	ret := _m.Called(_a0)

	var r0 []storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]storage.Event, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []storage.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockStorage_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockStorage_Expecter) GetEvents(_a0 interface{}) *MockStorage_GetEvents_Call {
	return &MockStorage_GetEvents_Call{Call: _e.mock.On("GetEvents", _a0)}
}

func (_c *MockStorage_GetEvents_Call) Run(run func(_a0 context.Context)) *MockStorage_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_GetEvents_Call) Return(_a0 []storage.Event, _a1 error) *MockStorage_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetEvents_Call) RunAndReturn(run func(context.Context) ([]storage.Event, error)) *MockStorage_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStorage) UpdateEvent(_a0 context.Context, _a1 uuid.UUID, _a2 *storage.Event) (*storage.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *storage.Event) (*storage.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *storage.Event) *storage.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *storage.Event) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type MockStorage_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
//   - _a2 *storage.Event
func (_e *MockStorage_Expecter) UpdateEvent(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStorage_UpdateEvent_Call {
	return &MockStorage_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent", _a0, _a1, _a2)}
}

func (_c *MockStorage_UpdateEvent_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID, _a2 *storage.Event)) *MockStorage_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*storage.Event))
	})
	return _c
}

func (_c *MockStorage_UpdateEvent_Call) Return(_a0 *storage.Event, _a1 error) *MockStorage_UpdateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_UpdateEvent_Call) RunAndReturn(run func(context.Context, uuid.UUID, *storage.Event) (*storage.Event, error)) *MockStorage_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
