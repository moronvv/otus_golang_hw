// Code generated by mockery v2.34.2. DO NOT EDIT.

package mockedstorage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: _a0
func (_m *MockStorage) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockStorage_Expecter) Close(_a0 interface{}) *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *MockStorage_Close_Call) Run(run func(_a0 context.Context)) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return(_a0 error) *MockStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func(context.Context) error) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields: _a0
func (_m *MockStorage) Connect(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockStorage_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockStorage_Expecter) Connect(_a0 interface{}) *MockStorage_Connect_Call {
	return &MockStorage_Connect_Call{Call: _e.mock.On("Connect", _a0)}
}

func (_c *MockStorage_Connect_Call) Run(run func(_a0 context.Context)) *MockStorage_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_Connect_Call) Return(_a0 error) *MockStorage_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Connect_Call) RunAndReturn(run func(context.Context) error) *MockStorage_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
